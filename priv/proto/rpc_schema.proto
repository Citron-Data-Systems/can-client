syntax = "proto3";

import "google/api/annotations.proto";

package CanClient;

message Empty {}

message EchoResult {
    string message = 1;
}
message SignalValue {
    float value = 2;
}



enum AlertLevel {
  INFO = 0; 
  WARN = 1;
  ERROR = 2;
}

message AlertSubscription {
  
}

message AlertValue {
    string message = 1;
    AlertLevel level = 2;
}

message SignalSubscription {
  string signal = 1;
}

message TextValue {
  string value = 1;
  bool flash = 3;
  string backgroundColor = 4;
  string textColor = 5;
  string textSize = 6;
}

// LayoutInfo represents positioning information in a grid
message LayoutInfo {
  // X position in grid units
  int32 x = 1;
  // Y position in grid units
  int32 y = 2;
  // Width in grid units
  int32 w = 3;
  // Height in grid units
  int32 h = 4;
}

// Signal represents a data signal
message Signal {
  string name = 1;
  string unit = 2;
  double range_min = 3;
  double range_max = 4;
  string id = 5;
}

// DBCMessage represents a CAN message
message DBCMessage {
  int64 can_id = 2;
  repeated Signal signals = 3;
}


// DBCDef represents a DBC definition
message DBCDef {
  string content = 2;
  string filename = 3;
  repeated DBCMessage messages = 4;
}

// LineChartWidget specific fields
message LineChartWidget {
  optional string title = 1;
  repeated string columns = 2;
  LayoutInfo layout = 3;
}

message GaugeZone {
  double start = 1;
  double end = 2;
  string color = 3;
}

message GaugeStyle {
  repeated GaugeZone zones = 4;
  string style_type = 5;

}

message GaugeWidget {
  optional string title = 1;
  repeated string columns = 2;
  LayoutInfo layout = 3;
  GaugeStyle style = 4;
}

message MessagePaneWidget {
  string color = 1;
  LayoutInfo layout = 2;
}



// Unified widget message with oneof field
message DashWidget {
  oneof widget {
    LineChartWidget line_chart = 1;
    GaugeWidget gauge = 2;
    MessagePaneWidget message_pane = 3;
  }
}

// // Dashboard contains multiple widgets
message Dashboard {
  string uid = 1;
  string name = 2;
  repeated DashWidget widgets = 3;
}


// // Vehicle is the top-level entity
message Vehicle {
  string name = 2;
  string avatar = 3;
  repeated DBCDef dbc_defs = 4;
  repeated Dashboard dashboards = 5;
  string uid = 6;
}

message NotFound {};
message Offline {};

message ResultError {
  oneof error {
    NotFound not_found = 1;
    Offline offline = 2;
  }
}

message VehicleMetaResult {
  oneof result {
    Vehicle vehicle = 1;
    ResultError error = 2;
  }
}

// The actual RPC service definition with HTTP/2 endpoints defined
service RPC {
  rpc Echo (Empty) returns (EchoResult) {
    option (google.api.http) = {
        get: "/echo"
    };
  }

  rpc StreamEcho (Empty) returns (stream EchoResult) {
    option (google.api.http) = {
        get: "/streamEcho"
    };
  }

  rpc StreamSignal (SignalSubscription) returns (stream SignalValue) {
    option (google.api.http) = {
        get: "/streamSignals"
    };
  }

  rpc StreamAlert (AlertSubscription) returns (stream AlertValue) {
    option (google.api.http) = {
        get: "/streamAlerts"
    };
  }

  rpc StreamText (Empty) returns (stream TextValue) {
    option (google.api.http) = {
        get: "/streamText"
    };
  }

  rpc VehicleMeta (Empty) returns (stream VehicleMetaResult) {
    option (google.api.http) = {
        get: "/vehicleMeta"
    };
  }

}

